#!/bin/bash -e
#
# tpm-luks-update: For each entry in the config file, run the script to
#		   regenerate its PCR values, then run tpm-luks to migrate
#		   its secret to a new NVRAM index sealed to the new PCRs
#
CONF=/etc/tpm-luks.conf
NVPERMSFILE=$(mktemp /tmp/${0##*/}-XXXXXX)

function cleanup
{
	rm -f ${NVPERMSFILE}
}

cleanup

trap cleanup EXIT

DEVICES=( $(cat ${CONF} | awk -F: '! /^#/ {print $1}') )
INDEXES=( $(cat ${CONF} | awk -F: '! /^#/ {print $2}') )
SCRIPTS=( $(cat ${CONF} | awk -F: '! /^#/ {print $3}') )

NUM_DEVICES=$(( ${#DEVICES[@]} - 1 ))
NUM_INDEXES=$(( ${#INDEXES[@]} - 1 ))
NUM_SCRIPTS=$(( ${#SCRIPTS[@]} - 1 ))
NUM_UNIQUES=$(( $(for t in ${INDEXES[@]}; do echo $t; done | sort -u | wc -l) - 1 ))

if [ $NUM_SCRIPTS -ne $NUM_DEVICES -o $NUM_DEVICES -ne $NUM_INDEXES ]; then
        echo "${CONF} parse error" 1>&2
        exit 1
fi

if [ $NUM_UNIQUES -ne $NUM_DEVICES ]; then
        echo "${CONF} parse error, all NVRAM indexes must be different" 1>&2
        exit 1
fi

for d in $(seq 0 $NUM_DEVICES); do
	echo "Generating PCR values for ${DEVICES[$d]}..."
	if [ -x ${SCRIPTS[$d]} ]; then
		${SCRIPTS[$d]} -o ${NVPERMSFILE}
		if [ $? -ne 0 ]; then
			echo "${SCRIPTS[$d]} has failed."
			continue
		fi
	fi

	echo "Migrating TPM NVRAM secret for ${DEVICES[$d]}..."
	if [ -f ${NVPERMSFILE} ]; then
		MSG=$(tpm-luks -m -i ${INDEXES[$d]} -d ${DEVICES[$d]} -p ${NVPERMSFILE})
	else
		MSG=$(tpm-luks -m -i ${INDEXES[$d]} -d ${DEVICES[$d]})
	fi
	if [ $? -ne 0 ]; then
		rm -f ${NVPERMSFILE}
		continue
	fi
	NEWINDEX=$(echo ${MSG} | awk -F " to index " '$1 ~ /Successfully/ { print $2 }')
	[ -f ${NVPERMSFILE} ] && rm -f ${NVPERMSFILE}

	#echo "# The following line generated by tpm-luks-update" >> ${CONF}
	#echo "${DEVICES[$d]}:${NEWINDEX}:${SCRIPTS[$d]}" >> ${CONF}
	#echo "Success. Updated ${CONF} for index ${INDEXES[$d]}."
done

exit 0
